name: Build Test

on:
  pull_request:
    paths:
      - 'backend/src/**'
      - 'backend/build.gradle'
      - 'backend/build.gradle.kts'
    # branches:
    #   - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      # 2. JDK 설정
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 의존성 캐시
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/build.gradle*') }}  # 캐시 키 설정
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: chmod +x ./gradlew

      # Gradle 빌드
      - name: Build with Gradle
        working-directory: ./backend
        run: ./gradlew clean build

      # 테스트 실행
      - name: Run tests with Gradle
        working-directory: ./backend
        run: ./gradlew test

      # 7. 빌드 아티팩트 저장 (옵션)
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: backend-build
          path: ./backend/build/libs/*.jar

      # 8. 배포 (옵션: AWS, Docker, Heroku 등)
      # 추후 배포 작업 시
#      - name: AWS
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: 'us-west-2'
#
#      - name: Deploy to AWS (optional)
#        run: |
#          # 예시로 AWS EC2에 배포하는 명령어를 추가할 수 있습니다.
#          aws ec2 describe-instances --region us-west-2
